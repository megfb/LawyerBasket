// <auto-generated />
using System;
using LawyerBasket.AuthService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LawyerBasket.AuthService.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251018195013_Initialize")]
    partial class Initialize
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LawyerBasket.AuthService.Domain.Entities.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("AppRole");

                    b.HasData(
                        new
                        {
                            Id = "8a1f4a29-4f91-4b6b-835b-9c12f89e6f21",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Role for Admin",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "f39d0b0f-4a2e-4f9a-a4da-9b61b0b8c112",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Role for User",
                            Name = "User"
                        },
                        new
                        {
                            Id = "a1a7a79e-5c53-47e8-b44d-19a98f5ac789",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Role for lawyers",
                            Name = "Lawyer"
                        },
                        new
                        {
                            Id = "5f1f0a00-cf2e-4ee8-b0e8-23e3a091cdee",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Role for clients",
                            Name = "Client"
                        });
                });

            modelBuilder.Entity("LawyerBasket.AuthService.Domain.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("AppUser");

                    b.HasData(
                        new
                        {
                            Id = "d9f8c5b2-4a1e-4c3b-9f21-7e2b8c123456",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@admin.com",
                            PasswordHash = "$2a$11$6zFgHTy5N6mMPRIyEiut1ei.PTzGCZA3wZYWgfRToORZP1oW7qBBi"
                        });
                });

            modelBuilder.Entity("LawyerBasket.AuthService.Domain.Entities.AppUserRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("AppUserRole");

                    b.HasData(
                        new
                        {
                            Id = "a3f5d2c7-9b8e-4f1a-92d4-6c3e7b8f1a2b",
                            CreatedAt = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            RoleId = "8a1f4a29-4f91-4b6b-835b-9c12f89e6f21",
                            UserId = "d9f8c5b2-4a1e-4c3b-9f21-7e2b8c123456"
                        });
                });

            modelBuilder.Entity("LawyerBasket.AuthService.Domain.Entities.AppUserRole", b =>
                {
                    b.HasOne("LawyerBasket.AuthService.Domain.Entities.AppRole", "AppRole")
                        .WithMany("AppUserRole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LawyerBasket.AuthService.Domain.Entities.AppUser", "AppUser")
                        .WithMany("AppUserRole")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppRole");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("LawyerBasket.AuthService.Domain.Entities.AppRole", b =>
                {
                    b.Navigation("AppUserRole");
                });

            modelBuilder.Entity("LawyerBasket.AuthService.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("AppUserRole");
                });
#pragma warning restore 612, 618
        }
    }
}
