// <auto-generated />
using System;
using LawyerBasket.ProfileService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LawyerBasket.ProfileService.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251021144552_ContactCascadeFalse")]
    partial class ContactCascadeFalse
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LawyerBasket.ProfileService.Domain.Entities.Academy", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Degree")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LawyerProfileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("University")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LawyerProfileId");

                    b.ToTable("Academy");
                });

            modelBuilder.Entity("LawyerBasket.ProfileService.Domain.Entities.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("CityId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserProfileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("UserProfileId")
                        .IsUnique();

                    b.ToTable("Address");
                });

            modelBuilder.Entity("LawyerBasket.ProfileService.Domain.Entities.Certificates", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateReceived")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("LawyerProfileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LawyerProfileId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("LawyerBasket.ProfileService.Domain.Entities.City", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = "b1e2c3d4-0001-4f5a-8c9b-1a2b3c4d5e6f",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "İstanbul",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "b1e2c3d4-0002-4f5a-8c9b-1a2b3c4d5e6f",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Ankara",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "b1e2c3d4-0003-4f5a-8c9b-1a2b3c4d5e6f",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "İzmir",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "b1e2c3d4-0004-4f5a-8c9b-1a2b3c4d5e6f",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Bursa",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "b1e2c3d4-0005-4f5a-8c9b-1a2b3c4d5e6f",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Antalya",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("LawyerBasket.ProfileService.Domain.Entities.Contact", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AlternateEmail")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AlternatePhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LawyerProfileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("LawyerProfileId")
                        .IsUnique();

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("LawyerBasket.ProfileService.Domain.Entities.Experience", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LawyerProfileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LawyerProfileId");

                    b.ToTable("Experience");
                });

            modelBuilder.Entity("LawyerBasket.ProfileService.Domain.Entities.Expertisement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Expertisement");

                    b.HasData(
                        new
                        {
                            Id = "e1a2b3c4-0001-4f5a-8c9d-1a2b3c4d5e6f",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Criminal Law",
                            Name = "Ceza Hukuku",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "e1a2b3c4-0002-4f5a-8c9d-1a2b3c4d5e6f",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Commercial / Corporate Law",
                            Name = "Ticaret / Şirketler Hukuku",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "e1a2b3c4-0003-4f5a-8c9d-1a2b3c4d5e6f",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Labor / Employment Law",
                            Name = "İş Hukuku",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "e1a2b3c4-0004-4f5a-8c9d-1a2b3c4d5e6f",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Family Law",
                            Name = "Aile Hukuku",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "e1a2b3c4-0005-4f5a-8c9d-1a2b3c4d5e6f",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Inheritance Law",
                            Name = "Miras Hukuku",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "e1a2b3c4-0006-4f5a-8c9d-1a2b3c4d5e6f",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Real Estate Law",
                            Name = "Gayrimenkul / Emlak Hukuku",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "e1a2b3c4-0007-4f5a-8c9d-1a2b3c4d5e6f",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Intellectual Property Law",
                            Name = "Fikri Mülkiyet Hukuku",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "e1a2b3c4-0008-4f5a-8c9d-1a2b3c4d5e6f",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Tax Law",
                            Name = "Vergi Hukuku",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "e1a2b3c4-0009-4f5a-8c9d-1a2b3c4d5e6f",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Administrative Law",
                            Name = "İdare Hukuku",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "e1a2b3c4-0010-4f5a-8c9d-1a2b3c4d5e6f",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "International Law",
                            Name = "Uluslararası Hukuk",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("LawyerBasket.ProfileService.Domain.Entities.Gender", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Gender");

                    b.HasData(
                        new
                        {
                            Id = "c1d2e3f4-0001-4a5b-8c9d-1a2b3c4d5e6f",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Male",
                            Name = "Male",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = "c1d2e3f4-0002-4a5b-8c9d-1a2b3c4d5e6f",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Female",
                            Name = "Female",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("LawyerBasket.ProfileService.Domain.Entities.LawyerExpertisement", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExpertisementId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LawyerProfileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ExpertisementId");

                    b.HasIndex("LawyerProfileId");

                    b.ToTable("LawyerExpertisement");
                });

            modelBuilder.Entity("LawyerBasket.ProfileService.Domain.Entities.LawyerProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BarAssociation")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("BarNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LicenseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserProfileId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId")
                        .IsUnique();

                    b.ToTable("LawyerProfile");
                });

            modelBuilder.Entity("LawyerBasket.ProfileService.Domain.Entities.UserProfile", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("GenderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NationalId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("LawyerBasket.ProfileService.Domain.Entities.Academy", b =>
                {
                    b.HasOne("LawyerBasket.ProfileService.Domain.Entities.LawyerProfile", "LawyerProfile")
                        .WithMany("Academy")
                        .HasForeignKey("LawyerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LawyerProfile");
                });

            modelBuilder.Entity("LawyerBasket.ProfileService.Domain.Entities.Address", b =>
                {
                    b.HasOne("LawyerBasket.ProfileService.Domain.Entities.City", "City")
                        .WithMany("Address")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LawyerBasket.ProfileService.Domain.Entities.UserProfile", "UserProfile")
                        .WithOne("Address")
                        .HasForeignKey("LawyerBasket.ProfileService.Domain.Entities.Address", "UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("LawyerBasket.ProfileService.Domain.Entities.Certificates", b =>
                {
                    b.HasOne("LawyerBasket.ProfileService.Domain.Entities.LawyerProfile", "LawyerProfile")
                        .WithMany("Certificates")
                        .HasForeignKey("LawyerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LawyerProfile");
                });

            modelBuilder.Entity("LawyerBasket.ProfileService.Domain.Entities.Contact", b =>
                {
                    b.HasOne("LawyerBasket.ProfileService.Domain.Entities.LawyerProfile", "LawyerProfile")
                        .WithOne("Contact")
                        .HasForeignKey("LawyerBasket.ProfileService.Domain.Entities.Contact", "LawyerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LawyerProfile");
                });

            modelBuilder.Entity("LawyerBasket.ProfileService.Domain.Entities.Experience", b =>
                {
                    b.HasOne("LawyerBasket.ProfileService.Domain.Entities.LawyerProfile", "LawyerProfile")
                        .WithMany("Experience")
                        .HasForeignKey("LawyerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LawyerProfile");
                });

            modelBuilder.Entity("LawyerBasket.ProfileService.Domain.Entities.LawyerExpertisement", b =>
                {
                    b.HasOne("LawyerBasket.ProfileService.Domain.Entities.Expertisement", "Expertisement")
                        .WithMany("lawyerExpertisement")
                        .HasForeignKey("ExpertisementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LawyerBasket.ProfileService.Domain.Entities.LawyerProfile", "LawyerProfile")
                        .WithMany("LawyerExpertisements")
                        .HasForeignKey("LawyerProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expertisement");

                    b.Navigation("LawyerProfile");
                });

            modelBuilder.Entity("LawyerBasket.ProfileService.Domain.Entities.LawyerProfile", b =>
                {
                    b.HasOne("LawyerBasket.ProfileService.Domain.Entities.UserProfile", "UserProfile")
                        .WithOne("LawyerProfile")
                        .HasForeignKey("LawyerBasket.ProfileService.Domain.Entities.LawyerProfile", "UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("LawyerBasket.ProfileService.Domain.Entities.UserProfile", b =>
                {
                    b.HasOne("LawyerBasket.ProfileService.Domain.Entities.Gender", "Gender")
                        .WithMany("UserProfile")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("LawyerBasket.ProfileService.Domain.Entities.City", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("LawyerBasket.ProfileService.Domain.Entities.Expertisement", b =>
                {
                    b.Navigation("lawyerExpertisement");
                });

            modelBuilder.Entity("LawyerBasket.ProfileService.Domain.Entities.Gender", b =>
                {
                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("LawyerBasket.ProfileService.Domain.Entities.LawyerProfile", b =>
                {
                    b.Navigation("Academy");

                    b.Navigation("Certificates");

                    b.Navigation("Contact");

                    b.Navigation("Experience");

                    b.Navigation("LawyerExpertisements");
                });

            modelBuilder.Entity("LawyerBasket.ProfileService.Domain.Entities.UserProfile", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("LawyerProfile");
                });
#pragma warning restore 612, 618
        }
    }
}
